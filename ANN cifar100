from keras.datasets import cifar100
(X_train,y_train),(X_test,y_test)=cifar100.load_data()
import matplotlib.pyplot as plt
for i in range(9):
 plt.subplot(330+i+1)
 plt.imshow(X_train[i])
plt.show()
X = X_test
X_train =X_train.reshape(50000,3072)
X_test = X_test.reshape(10000,3072)
X_train = X_train.astype('float32')
X_test = X_test.astype('float32')
X_train/=255
X_test/=255
from tensorflow.keras.utils import to_categorical
y_train=to_categorical(y_train,100)
y_test=to_categorical(y_test,100)
from keras.models import Sequential
from keras.layers import Dense,Activation,Dropout
model = Sequential()
model.add(Dense(1024,activation='relu',input_shape=(3072,)))
model.add(Dropout(0.2))
model.add(Dense(1024,activation='relu'))
model.add(Dropout(0.1))
model.add(Dense(100,activation="softmax"))
model.summary()
from tensorflow.keras.optimizers import RMSprop
model.compile(loss='categorical_crossentropy',optimizer=RMSprop(),metrics=['accuracy'])
model.fit(X_train, y_train, batch_size=128 ,epochs =100, verbose=1,validation_data=(X_test,y_test))#epochs so lan hoc,verbose hien thi
Score = model.evaluate(X_test,y_test,verbose=1)
model.save('ANNcifar100.h5')
history=model.fit(X_train, y_train, batch_size=128,epochs =10, verbose=1,validation_data=(X_test,y_test))
score = model.evaluate(X_test, y_test, verbose=1)
print('Test loss =', score[0])
print('Test accurracy =', score[1])
from keras.preprocessing.image import img_to_array, load_img
import numpy as np
plt.plot(history.history['accuracy'])
plt.plot(history.history['val_accuracy'])
plt.title('Model Accuracy')
plt.ylabel('accuracy')
plt.xlabel('epoch')
plt.legend(['train','validation'],loc='upper left')
y_pred = model.predict(X_test)
for i in range(9):
  plt.subplot(330+i+1)
  plt.imshow(X[i])
  plt.show()
  print(np.round(y_pred[i]))
