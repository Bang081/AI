from keras.datasets import cifar100
(X_train,y_train),(X_test,y_test)=cifar100.load_data()
import matplotlib.pyplot as plt
for i in range(9):
 plt.subplot(330+i+1)
 plt.imshow(X_train[i])
plt.show()
X_train=X_train.astype('float32')
X_test=X_test.astype('float32')
X_train=X_train/255
X_test/=255
from tensorflow.keras.utils import to_categorical
y_train=to_categorical(y_train,100)
y_test=to_categorical(y_test,100)
from keras.models import Sequential
from keras.layers import Dense,Activation,Dropout,Conv2D,MaxPooling2D
model=Sequential()
model.add(Conv2D(32,(3,3),activation='relu',kernel_initializer='he_uniform',padding='Same',input_shape=(32,32,3)))
model.add(Conv2D(32,(3,3),activation='relu',kernel_initializer='he_uniform',padding='Same'))
model.add(MaxPooling2D((2,2)))
#tao lop an
model=Sequential()
model.add(Conv2D(64,(3,3),activation='relu',kernel_initializer='he_uniform',padding='Same'))
model.add(Conv2D(64,(3,3),activation='relu',kernel_initializer='he_uniform',padding='Same'))
model.add(MaxPooling2D((2,2)))
model=Sequential()
model.add(Conv2D(128,(3,3),activation='relu',kernel_initializer='he_uniform',padding='Same'))
model.add(Conv2D(128,(3,3),activation='relu',kernel_initializer='he_uniform',padding='Same'))
model.add(MaxPooling2D((2,2)))
from keras.layers.core.flatten import Flatten
model.add(Flatten())
model.add(Dense(128,activation='relu',kernel_initializer='he_uniform'))
model.add(Dense(100,activation='softmax'))
from tensorflow.keras.optimizers import SGD
opt=SGD(lr=0.01,momentum=0.9)
model.compile(optimizer=opt,loss='categorical_crossentropy',metrics=['accuracy'])
history = model.fit(X_train,y_train,batch_size=128,epochs=100,validation_data=(X_test,y_test),verbose=1)
model.save('CNNcifar10.h5')
from keras.models import load_model
model5=load_model('CNNcifar10.h5')
from keras.preprocessing.image import img_to_array, load_img
import numpy as np
img=load_img('c1.jpg',target_size=(32,32))
plt.imshow(img)
img=img_to_array(img)
img=img.reshape(1,32,32,3)
img=img.astype('float32')
img=img/255
np.argmax(model.predict(img),axis=1)
